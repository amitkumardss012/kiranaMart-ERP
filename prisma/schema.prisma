// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  password  String
  role      Role    @default(ADMIN)
  isActive  Boolean @default(true)
  longitude Float?
  latitude  Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  SUPER_ADMIN
  ADMIN
}

// Employee Model
model Employee {
  id                   Int          @id @default(autoincrement())
  prefix               String
  firstName            String
  lastName             String
  email                String       @unique
  userName             String       @unique
  password             String
  accessStores         Store[]      @relation("EmployeeAccessStores")
  dateOfBirth          DateTime
  gender               Gender       @default(MALE)
  bloodGroup           String?
  phone                String
  alternatePhoneNumber String?
  familyPhoneNumber    String?
  twitterLink          String?
  faceBookLink         String?
  instagramLink        String?
  guardian             String?
  aadharNumber         String
  panNumber            String
  permanentAddress     String
  currentAddress       String
  accountHolderName    String
  accountNumber        String
  bankName             String
  IFSC_code            String
  bankBranch           String
  taxPayerId           String?
  primaryWorkLocation  String?
  basicSalary          String
  salaryType           SalaryType   @default(MONTHLY)
  payComponent         String?
  hireDate             DateTime
  isActive             Boolean      @default(true)
  employeeRoleId       Int
  employeeRole         EmployeeRole @relation(fields: [employeeRoleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// enum
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum SalaryType {
  MONTHLY
  HOURLY
}

// Store Model
model Store {
  id                        Int         @id @default(autoincrement())
  name                      String
  address                   String
  city                      String
  state                     String
  country                   String
  pincode                   String
  contactNumber             String
  email                     String
  isActive                  Boolean     @default(true)
  isOpen                    Boolean     @default(true)
  isOnlineDeliveryAvailable Boolean     @default(true)
  status                    StoreStatus @default(ACTIVE)
  type                      StoreType   @default(FRANCHISE)
  latitude                  Float?
  longitude                 Float?
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt

  // Relations
  employees Employee[] @relation("EmployeeAccessStores")
}

// Enumm
enum StoreType {
  FRANCHISE
  COMPANY_OWNED
  OTHER
}

enum StoreStatus {
  ACTIVE
  CLOSED
  UNDER_MAINTENANCE
}

model EmployeeRole {
  id         Int          @id @default(autoincrement())
  roleName   String       @unique
  permission Permission[] @relation("employeeRoles")

  employeeRole Employee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  employeeRole EmployeeRole[] @relation("employeeRoles")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id              Int       @id @default(autoincrement())
  name            String
  description     String?
  sku             String?   @unique
  brand           String?
  barcode         String?   @unique
  sellingPrice    Float
  costPrice       Float
  unit            Unit      @default(PIECE)
  hasOffer        Boolean   @default(false)
  manufactureDate DateTime?
  expiryDate      DateTime?
  selfLife        Int?
  image           String?
  isActive        Boolean   @default(true)

  // Relationships
  categoryId    Int?
  category      Category?    @relation(fields: [categoryId], references: [id])
  subCategoryId Int?
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  discountId    Int?
  discount      Discount?    @relation(fields: [discountId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Unit {
  PIECE // Piece - default
  KG // Kilogram
  GRAM // Gram
  LITER // Liter
  ML // Milliliter
  METER // Meter
}

model Discount {
  id           Int          @id @default(autoincrement())
  title        String
  description  String?
  discountType DiscountType
  value        Float? // e.g., 40 for 40% OFF
  buyQty       Int? // For BOGO: e.g., buy 1
  getQty       Int? // For BOGO: get 1
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean      @default(true)

  // Relationships
  product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enums
enum DiscountType {
  PERCENTAGE // e.g., 40% OFF
  FLAT // e.g., â‚¹50 OFF
  BOGO // Buy One Get One
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  image       String?
  isActive    Boolean       @default(true)
  // Relations
  subCategory SubCategory[]
  product     Product[]
  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model SubCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  image       String?
  categoryId  Int
  isActive    Boolean   @default(true)
  // Relationships
  category    Category  @relation(fields: [categoryId], references: [id])
  product     Product[]
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš« don't move futer without implementing inventry section ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«ðŸš«

