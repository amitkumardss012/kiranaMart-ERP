
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  isActive: 'isActive',
  longitude: 'longitude',
  latitude: 'latitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  prefix: 'prefix',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  userName: 'userName',
  password: 'password',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  bloodGroup: 'bloodGroup',
  phone: 'phone',
  alternatePhoneNumber: 'alternatePhoneNumber',
  familyPhoneNumber: 'familyPhoneNumber',
  twitterLink: 'twitterLink',
  faceBookLink: 'faceBookLink',
  instagramLink: 'instagramLink',
  guardian: 'guardian',
  aadharNumber: 'aadharNumber',
  panNumber: 'panNumber',
  permanentAddress: 'permanentAddress',
  currentAddress: 'currentAddress',
  accountHolderName: 'accountHolderName',
  accountNumber: 'accountNumber',
  bankName: 'bankName',
  IFSC_code: 'IFSC_code',
  bankBranch: 'bankBranch',
  taxPayerId: 'taxPayerId',
  primaryWorkLocation: 'primaryWorkLocation',
  basicSalary: 'basicSalary',
  salaryType: 'salaryType',
  payComponent: 'payComponent',
  hireDate: 'hireDate',
  isActive: 'isActive',
  employeeRoleId: 'employeeRoleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  pincode: 'pincode',
  contactNumber: 'contactNumber',
  email: 'email',
  isActive: 'isActive',
  isOpen: 'isOpen',
  isOnlineDeliveryAvailable: 'isOnlineDeliveryAvailable',
  status: 'status',
  type: 'type',
  latitude: 'latitude',
  longitude: 'longitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeRoleScalarFieldEnum = {
  id: 'id',
  roleName: 'roleName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  sku: 'sku',
  brand: 'brand',
  barcode: 'barcode',
  sellingPrice: 'sellingPrice',
  costPrice: 'costPrice',
  unit: 'unit',
  hasOffer: 'hasOffer',
  manufactureDate: 'manufactureDate',
  expiryDate: 'expiryDate',
  selfLife: 'selfLife',
  image: 'image',
  isActive: 'isActive',
  categoryId: 'categoryId',
  subCategoryId: 'subCategoryId',
  discountId: 'discountId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DiscountScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  discountType: 'discountType',
  value: 'value',
  buyQty: 'buyQty',
  getQty: 'getQty',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  categoryId: 'categoryId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.AdminOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  password: 'password'
};

exports.Prisma.EmployeeOrderByRelevanceFieldEnum = {
  prefix: 'prefix',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  userName: 'userName',
  password: 'password',
  bloodGroup: 'bloodGroup',
  phone: 'phone',
  alternatePhoneNumber: 'alternatePhoneNumber',
  familyPhoneNumber: 'familyPhoneNumber',
  twitterLink: 'twitterLink',
  faceBookLink: 'faceBookLink',
  instagramLink: 'instagramLink',
  guardian: 'guardian',
  aadharNumber: 'aadharNumber',
  panNumber: 'panNumber',
  permanentAddress: 'permanentAddress',
  currentAddress: 'currentAddress',
  accountHolderName: 'accountHolderName',
  accountNumber: 'accountNumber',
  bankName: 'bankName',
  IFSC_code: 'IFSC_code',
  bankBranch: 'bankBranch',
  taxPayerId: 'taxPayerId',
  primaryWorkLocation: 'primaryWorkLocation',
  basicSalary: 'basicSalary',
  payComponent: 'payComponent'
};

exports.Prisma.StoreOrderByRelevanceFieldEnum = {
  name: 'name',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  pincode: 'pincode',
  contactNumber: 'contactNumber',
  email: 'email'
};

exports.Prisma.EmployeeRoleOrderByRelevanceFieldEnum = {
  roleName: 'roleName'
};

exports.Prisma.PermissionOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  sku: 'sku',
  brand: 'brand',
  barcode: 'barcode',
  image: 'image'
};

exports.Prisma.DiscountOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description'
};

exports.Prisma.CategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  image: 'image'
};

exports.Prisma.SubCategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  image: 'image'
};
exports.Role = exports.$Enums.Role = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

exports.SalaryType = exports.$Enums.SalaryType = {
  MONTHLY: 'MONTHLY',
  HOURLY: 'HOURLY'
};

exports.StoreStatus = exports.$Enums.StoreStatus = {
  ACTIVE: 'ACTIVE',
  CLOSED: 'CLOSED',
  UNDER_MAINTENANCE: 'UNDER_MAINTENANCE'
};

exports.StoreType = exports.$Enums.StoreType = {
  FRANCHISE: 'FRANCHISE',
  COMPANY_OWNED: 'COMPANY_OWNED',
  OTHER: 'OTHER'
};

exports.Unit = exports.$Enums.Unit = {
  PIECE: 'PIECE',
  KG: 'KG',
  GRAM: 'GRAM',
  LITER: 'LITER',
  ML: 'ML',
  METER: 'METER'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  PERCENTAGE: 'PERCENTAGE',
  FLAT: 'FLAT',
  BOGO: 'BOGO'
};

exports.Prisma.ModelName = {
  Admin: 'Admin',
  Employee: 'Employee',
  Store: 'Store',
  EmployeeRole: 'EmployeeRole',
  Permission: 'Permission',
  Product: 'Product',
  Discount: 'Discount',
  Category: 'Category',
  SubCategory: 'SubCategory'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
